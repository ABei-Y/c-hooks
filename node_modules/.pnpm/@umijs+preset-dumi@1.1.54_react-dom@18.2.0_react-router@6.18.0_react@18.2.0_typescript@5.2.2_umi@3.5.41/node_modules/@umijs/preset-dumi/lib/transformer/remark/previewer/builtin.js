"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _demo = require("../../demo");
var _utils = require("../../utils");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/**
 * builtin previewer transformer
 */
const builtinPreviewerTransformer = ({
  mdAbsPath,
  node
}) => {
  var _node$properties$meta;
  const isExternalDemo = Boolean(node.properties.filePath);
  const fileAbsPath = node.properties.filePath || mdAbsPath;
  let files = {};
  let dependencies = {};
  // collect third-party dependencies and locale file dependencies for demo
  // FIXME: handle frontmatter in the head of external demo code
  if (!((_node$properties$meta = node.properties.meta) === null || _node$properties$meta === void 0 ? void 0 : _node$properties$meta.inline)) {
    try {
      var _getDepsForDemo = (0, _demo.getDepsForDemo)(node.properties.source, {
        isTSX: /^tsx?$/.test(node.properties.lang),
        fileAbsPath
      });
      files = _getDepsForDemo.files;
      dependencies = _getDepsForDemo.dependencies;
    } catch (_unused) {
      /* nothing */
    }
  }
  return {
    // previewer props
    previewerProps: {
      sources: _objectSpread({
        _: {
          [node.properties.lang]: isExternalDemo ? (0, _utils.encodeHoistImport)(node.properties.filePath) : node.properties.source
        }
      }, Object.keys(files).reduce((result, file) => _objectSpread(_objectSpread({}, result), {}, {
        [file]: {
          import: files[file].import,
          path: files[file].fileAbsPath
        }
      }), {})),
      dependencies
    }
  };
};
var _default = exports.default = {
  type: 'builtin',
  fn: builtinPreviewerTransformer
};