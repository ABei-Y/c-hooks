"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = codeBlock;
function _unistUtilVisit() {
  const data = _interopRequireDefault(require("unist-util-visit"));
  _unistUtilVisit = function _unistUtilVisit() {
    return data;
  };
  return data;
}
function _utils() {
  const data = require("@umijs/utils");
  _utils = function _utils() {
    return data;
  };
  return data;
}
var _ = _interopRequireDefault(require(".."));
var _context = _interopRequireDefault(require("../../context"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/**
 * parser for parse modifier of code block
 * @param meta  meta raw string
 */
function codeBlockModifierParser(meta) {
  return (meta || '').split('|').reduce((result, item) => {
    item = String.prototype.trim.call(item);
    if (item) {
      result[item] = true;
    }
    return result;
  }, {});
}
/**
 * rehype plugin for convert code block to demo compomnent
 */
function codeBlock() {
  return ast => {
    // handle md code block syntax
    (0, _unistUtilVisit().default)(ast, 'code', node => {
      var _ctx$opts;
      const resolve = (_ctx$opts = _context.default.opts) === null || _ctx$opts === void 0 ? void 0 : _ctx$opts.resolve;
      const modifier = codeBlockModifierParser(node.meta);
      if ((resolve === null || resolve === void 0 ? void 0 : resolve.previewLangs.includes(node.lang)) && (!(resolve === null || resolve === void 0 ? void 0 : resolve.passivePreview) || resolve.passivePreview && modifier.preview)) {
        // extract frontmatters for embedded demo
        const _transformer$code = _.default.code((0, _utils().winEOL)(node.value)),
          content = _transformer$code.content,
          meta = _transformer$code.meta;
        if (modifier.pure) {
          // clear useless meta if the lang with pure modifier
          node.meta = node.meta.replace(/ ?\| ?pure/, '') || null;
        } else {
          // customize type (use for rehype demo handler)
          node.type = 'demo';
          node.meta = _objectSpread(_objectSpread({}, modifier), meta);
          node.value = content;
        }
      }
    });
  };
}