"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cloneToRuleArr = cloneToRuleArr;
exports.deleteIn = deleteIn;
exports.getErrorStrs = getErrorStrs;
exports.getIn = getIn;
exports.getParams = getParams;
exports.getValueFromEvent = getValueFromEvent;
exports.hasIn = hasIn;
exports.mapValidateRules = mapValidateRules;
exports.setIn = setIn;
exports.splitNameToPath = splitNameToPath;
exports.warning = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _extends3 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function splitNameToPath(name) {
  return typeof name === 'string' && name ? name.replace(/\[/, '.').replace(/\]/, '').split('.') : '';
}
function hasIn(state, name) {
  if (!state) {
    return state;
  }
  var path = splitNameToPath(name);
  var length = path.length;
  if (!length) {
    return false;
  }
  var result = state;
  for (var i = 0; i < length; ++i) {
    // parent is not object
    if ((0, _typeof2.default)(result) !== 'object' || result === null) {
      return false;
    }
    // has no property
    var thisName = path[i];
    if (!(thisName in result)) {
      return false;
    }
    // pass on
    result = result[thisName];
  }
  return true;
}
function getIn(state, name) {
  if (!state) {
    return state;
  }
  var path = splitNameToPath(name);
  var length = path.length;
  if (!length) {
    return undefined;
  }
  var result = state;
  for (var i = 0; i < length; ++i) {
    // parent is not object
    if ((0, _typeof2.default)(result) !== 'object' || result === null) {
      return undefined;
    }
    result = result[path[i]];
  }
  return result;
}
var setInWithPath = function setInWithPath(state, value, path, pathIndex) {
  if (pathIndex >= path.length) {
    return value;
  }
  var first = path[pathIndex];
  var next = setInWithPath(state && state[first], value, path, pathIndex + 1);
  if (!state) {
    var initialized = isNaN(first) ? {} : [];
    initialized[first] = next;
    return initialized;
  }
  if (Array.isArray(state)) {
    var copy = [].concat(state);
    copy[first] = next;
    return copy;
  }
  return (0, _extends3.default)({}, state, (0, _defineProperty2.default)({}, first, next));
};
function setIn(state, name, value) {
  return setInWithPath(state, value, typeof name === 'string' ? name.replace(/\[/, '.').replace(/\]/, '').split('.') : '', 0);
}
function deleteIn(state, name) {
  if (!state) {
    return;
  }
  var path = typeof name === 'string' ? name.replace(/\[/, '.').replace(/\]/, '').split('.') : '';
  var length = path.length;
  if (!length) {
    return state;
  }
  var result = state;
  for (var i = 0; i < length && !!result; ++i) {
    if (i === length - 1) {
      delete result[path[i]];
    } else {
      result = result[path[i]];
    }
  }
  return state;
}
function getErrorStrs(errors, processErrorMessage) {
  if (errors) {
    return errors.map(function (e) {
      var message = typeof e.message !== 'undefined' ? e.message : e;
      if (typeof processErrorMessage === 'function') {
        return processErrorMessage(message);
      }
      return message;
    });
  }
  return errors;
}
function getParams(ns, cb) {
  var names = typeof ns === 'string' ? [ns] : ns;
  var callback = cb;
  if (cb === undefined && typeof names === 'function') {
    callback = names;
    names = undefined;
  }
  return {
    names: names,
    callback: callback
  };
}

/**
 * 从组件事件中获取数据
 * @param e Event或者value
 * @returns value
 */
function getValueFromEvent(e) {
  // support custom element
  if (!e || !e.target || !e.preventDefault) {
    return e;
  }
  var target = e.target;
  if (target.type === 'checkbox') {
    return target.checked;
  } else if (target.type === 'radio') {
    //兼容原生radioGroup
    if (target.value) {
      return target.value;
    } else {
      return target.checked;
    }
  }
  return target.value;
}
function validateMap(rulesMap, rule, defaultTrigger) {
  var nrule = (0, _extends3.default)({}, rule);
  if (!nrule.trigger) {
    nrule.trigger = [defaultTrigger];
  }
  if (typeof nrule.trigger === 'string') {
    nrule.trigger = [nrule.trigger];
  }
  for (var i = 0; i < nrule.trigger.length; i++) {
    var trigger = nrule.trigger[i];
    if (trigger in rulesMap) {
      rulesMap[trigger].push(nrule);
    } else {
      rulesMap[trigger] = [nrule];
    }
  }
  delete nrule.trigger;
}

/**
 * 提取rule里面的trigger并且做映射
 * @param  {Array} rules   规则
 * @param  {String} defaultTrigger 默认触发
 * @return {Object} {onChange:rule1, onBlur: rule2}
 */
function mapValidateRules(rules, defaultTrigger) {
  var rulesMap = {};
  rules.forEach(function (rule) {
    validateMap(rulesMap, rule, defaultTrigger);
  });
  return rulesMap;
}
var warn = function warn() {};
if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV !== 'production' && typeof window !== 'undefined' && typeof document !== 'undefined') {
  warn = function warn() {
    /* eslint-disable no-console */
    if (typeof console !== 'undefined' && console.error) {
      var _console;
      (_console = console).error.apply(_console, arguments);
    }
  };
}
var warning = exports.warning = warn;
function cloneToRuleArr(rules) {
  if (!rules) {
    return [];
  }
  var rulesArr = Array.isArray(rules) ? rules : [rules];
  // 后续会修改rule对象，这里做浅复制以避免对传入对象的修改
  return rulesArr.map(function (rule) {
    return _objectSpread({}, rule);
  });
}