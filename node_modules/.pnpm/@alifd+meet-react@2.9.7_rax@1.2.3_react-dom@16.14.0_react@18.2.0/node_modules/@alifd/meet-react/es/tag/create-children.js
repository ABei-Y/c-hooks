function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import React, { createElement, Children, isValidElement, cloneElement } from "react";
import classNames from 'classnames';
import { Text } from "@alifd/meet-react-component-one";
import Icon from '../icon';
import { isBoolean, isNil, isNumber, isString } from '../utils';
var CreateChildren = function CreateChildren(children, classes, prefix, size) {
  var count = Children.count(children);
  return Children.map(children, function (child, index) {
    var _classNames;
    if (isNil(child) || isBoolean(child)) {
      return null;
    }
    var key = child.key || "mt-tag-".concat(index);
    if (isNumber(child) || isString(child)) {
      return /*#__PURE__*/React.createElement(Text, {
        key: key,
        className: classes.textCls
      }, child);
    }
    if (!isValidElement(child)) {
      return child;
    }
    switch (true) {
      case child.type === Text:
        return cloneElement(child, {
          key: key,
          className: classes.textCls,
          style: child.props.style || {}
        });
      case child.type === Icon:
        return cloneElement(child, {
          key: key,
          className: classNames(classes.iconCls, (_classNames = {}, _defineProperty(_classNames, "".concat(prefix, "tag-icon--").concat(size, "-first"), index === 0), _defineProperty(_classNames, "".concat(prefix, "tag-icon--").concat(size, "-last"), index === count - 1), _classNames)),
          style: child.props.style || {}
        });
      default:
        return cloneElement(child, {
          key: key
        });
    }
  });
};
export default CreateChildren;