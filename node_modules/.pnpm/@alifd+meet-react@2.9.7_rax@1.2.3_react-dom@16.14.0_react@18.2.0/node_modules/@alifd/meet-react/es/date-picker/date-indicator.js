function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import React, { createElement } from "react";
import classNames from 'classnames';
import { Text } from "@alifd/meet-react-component-one";
import View from '../view';
var DateIndicator = function DateIndicator(props) {
  var _props$prefix = props.prefix,
    prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
    highlight = props.highlight,
    _props$separator = props.separator,
    separator = _props$separator === void 0 ? ' ' : _props$separator,
    _props$values = props.values,
    values = _props$values === void 0 ? [] : _props$values;
  var clsPrefix = "".concat(prefix, "datepicker");
  return /*#__PURE__*/React.createElement(View, {
    className: "".concat(clsPrefix, "-time-indicator")
  }, /*#__PURE__*/React.createElement(Text, {
    className: classNames("".concat(clsPrefix, "-time-indicator-text"), _defineProperty({}, "".concat(clsPrefix, "-time-indicator--highlight"), highlight === 0)),
    "x-if": highlight === 0
  }, values[0]), /*#__PURE__*/React.createElement(Text, {
    className: "".concat(clsPrefix, "-time-indicator-text")
  }, separator), /*#__PURE__*/React.createElement(Text, {
    className: classNames("".concat(clsPrefix, "-time-indicator-text"), _defineProperty({}, "".concat(clsPrefix, "-time-indicator--highlight"), highlight === 1)),
    "x-if": highlight === 1
  }, values[1]));
};
export default DateIndicator;