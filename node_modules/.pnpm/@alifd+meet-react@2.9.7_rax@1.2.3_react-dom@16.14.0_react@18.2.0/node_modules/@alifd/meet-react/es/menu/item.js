function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { __rest } from "tslib";
import React, { createElement, forwardRef, useContext } from "react";
import classnames from 'classnames';
import Icon from '../icon';
import List from '../list';
import MenuContext from './menu-context';
import { isInvalidValue } from '../utils';
var MenuItem = function MenuItem(props, ref) {
  var context = useContext(MenuContext);
  var className = props.className,
    children = props.children,
    disabled = props.disabled,
    itemKey = props.itemKey,
    title = props.title,
    others = __rest(props, ["className", "children", "disabled", "itemKey", "title"]);
  var prefix = context.prefix,
    selectMode = context.selectMode,
    selectedKeys = context.selectedKeys,
    onClickItem = context.onClickItem,
    onSelect = context.onSelect;
  var selected = !isInvalidValue(itemKey) && selectedKeys.includes(itemKey);
  var handleClick = function handleClick(e) {
    onClickItem(itemKey, props, e);
    if (selectMode) {
      onSelect(!selected, props);
    }
  };
  return /*#__PURE__*/React.createElement(List.Item, _extends({}, others, {
    ref: ref,
    className: classnames("".concat(prefix, "menu-item"), className, _defineProperty({}, "".concat(prefix, "menu-item--disabled"), disabled)),
    title: children || title,
    disabled: disabled,
    extra: selected ? /*#__PURE__*/React.createElement(Icon, {
      name: "select"
    }) : null,
    onClick: handleClick
  }));
};
export default /*#__PURE__*/forwardRef(MenuItem);